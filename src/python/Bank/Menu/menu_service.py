from dat2011_little_fox28.src.python.Bank.Menu.menu_interface import MenuInterface
from dat2011_little_fox28.src.python.Bank.account import Account
from dat2011_little_fox28.src.python.Bank.account_service import AccountService
from dat2011_little_fox28.src.utils.handle_input_for_number import HandleInputForNumber
from dat2011_little_fox28.src.utils.handle_input_for_string import HandleInputForString

import os
import csv
from datetime import datetime

INPUT_HEADER = ['Nh·∫≠p s·ªë t√†i kho·∫£n:', 'Nh·∫≠p t√™n kh√°ch h√†ng:', 'Nh·∫≠p lo·∫°i t√†i kho·∫£n:', 'Nh·∫≠p s·ªë d∆∞:']
file_name='taikhoan.csv'


class MenuService(MenuInterface, AccountService):
    def __init__(self):
        super().__init__()

    def create_account(self):
        """T·∫°o t√†i kho·∫£n m·ªõi"""
        try:
            acc_id_input = HandleInputForNumber()
            acc_id_input.handle_input(1, [INPUT_HEADER[0]])
            acc_id = str(int(acc_id_input.getter_x()))

            if self.find_account(acc_id):
                print("L·ªói: T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.")
                return

            acc_inf_input = HandleInputForString()
            acc_inf_input.handle_input(2, INPUT_HEADER[1:3])
            user_name = acc_inf_input.getter_x()
            acc_type = acc_inf_input.getter_y().upper()

            balance_input = HandleInputForNumber()
            balance_input.handle_input(1, [INPUT_HEADER[3]])
            account_balance = balance_input.getter_x()

            new_account = Account(acc_id, user_name, acc_type, account_balance)
            self.account_list.append(new_account)
            self._csv_account_writer()
            print("T·∫°o t√†i kho·∫£n th√†nh c√¥ng üí•")
            print(new_account.show_account())
        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i")

    def list_account(self):
        """Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n"""
        if not self.account_list:
            print("Ch∆∞a c√≥ t√†i kho·∫£n n√†o.")
            return
        for acc in self.account_list:
            print(acc.show_account())

    def edit_account(self):
        """Ch·ªânh s·ª≠a th√¥ng tin t√†i kho·∫£n"""
        try:
            acc_id_input = HandleInputForNumber()
            acc_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n c·∫ßn s·ª≠a:"])
            acc_id = str(int(acc_id_input.getter_x()))

            account = self.find_account(acc_id)
            if not account:
                print("L·ªói: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.")
                return

            print("Th√¥ng tin t√†i kho·∫£n hi·ªán t·∫°i:")
            print(account.show_account())

            acc_inf_input = HandleInputForString()
            acc_inf_input.handle_input(2, ["Nh·∫≠p t√™n kh√°ch h√†ng m·ªõi:", "Nh·∫≠p lo·∫°i t√†i kho·∫£n m·ªõi (T/C):"])
            new_user_name = acc_inf_input.getter_x()
            new_acc_type = acc_inf_input.getter_y().upper()

            # Create a new account object with updated info and replace the old one
            updated_account = Account(account.acc_id, new_user_name, new_acc_type, account.account_balance)
            # Find the index of the old account and replace it
            for i, acc in enumerate(self.account_list):
                if acc.acc_id == acc_id:
                    self.account_list[i] = updated_account
                    break
            
            self._csv_account_writer()
            print("C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng.")
            print(updated_account.show_account())

        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")

    def remove_account(self):
        """X√≥a t√†i kho·∫£n"""
        try:
            acc_id_input = HandleInputForNumber()
            acc_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n c·∫ßn x√≥a:"])
            acc_id = str(int(acc_id_input.getter_x()))

            account = self.find_account(acc_id)
            if not account:
                print("L·ªói: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.")
                return

            self.account_list.remove(account)
            self._csv_account_writer()
            print("X√≥a t√†i kho·∫£n th√†nh c√¥ng.")
        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")

    def find_account_by_username(self):
        """T√¨m t√†i kho·∫£n theo t√™n kh√°ch h√†ng"""
        try:
            name_input = HandleInputForString()
            name_input.handle_input(1, ["Nh·∫≠p t√™n kh√°ch h√†ng c·∫ßn t√¨m:"])
            user_name = name_input.getter_x()

            found_accounts = [acc for acc in self.account_list if user_name.lower() in acc.user_name.lower()]

            if not found_accounts:
                print("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†o v·ªõi t√™n kh√°ch h√†ng n√†y.")
                return

            for acc in found_accounts:
                print(acc.show_account())
        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")

    def account_statement(self):
        """Sao k√™ t√†i kho·∫£n"""
        try:
            acc_id_input = HandleInputForNumber()
            acc_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n ƒë·ªÉ sao k√™:"])
            acc_id = str(int(acc_id_input.getter_x()))

            account = self.find_account(acc_id)
            if not account:
                print("L·ªói: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.")
                return
            print("Th√¥ng tin t√†i kho·∫£n:")
            print(account.show_account())
        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")

    def deposit_money(self):
        """G·ª≠i ti·ªÅn v√†o t√†i kho·∫£n"""
        try:
            acc_id_input = HandleInputForNumber()
            acc_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n ƒë·ªÉ g·ª≠i ti·ªÅn:"])
            acc_id = str(int(acc_id_input.getter_x()))

            account = self.find_account(acc_id)
            if not account:
                print("L·ªói: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.")
                return

            amount_input = HandleInputForNumber()
            amount_input.handle_input(1, ["Nh·∫≠p s·ªë ti·ªÅn c·∫ßn g·ª≠i:"])
            amount = amount_input.getter_x()

            if account.deposit_money(amount):
                self._csv_account_writer()
                print(f"G·ª≠i ti·ªÅn th√†nh c√¥ng. S·ªë d∆∞ m·ªõi: {account.account_balance:,.0f} VNƒê")
        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")
            
    def withdraw_money(self):
        """R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n"""
        try:
            acc_id_input = HandleInputForNumber()
            acc_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n ƒë·ªÉ r√∫t ti·ªÅn:"])
            acc_id = str(int(acc_id_input.getter_x()))

            account = self.find_account(acc_id)
            if not account:
                print("L·ªói: T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.")
                return

            amount_input = HandleInputForNumber()
            amount_input.handle_input(1, ["Nh·∫≠p s·ªë ti·ªÅn c·∫ßn r√∫t:"])
            amount = amount_input.getter_x()

            if account.withdrawal_money(amount):
                self._csv_account_writer()
                print(f"R√∫t ti·ªÅn th√†nh c√¥ng. S·ªë d∆∞ m·ªõi: {account.account_balance:,.0f} VNƒê")
        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")

    def transfer_money(self): # bonus
        """Chuy·ªÉn ti·ªÅn gi·ªØa 2 t√†i kho·∫£n"""
        try:
            # Get sender account
            sender_id_input = HandleInputForNumber()
            sender_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n ng∆∞·ªùi g·ª≠i:"])
            sender_id = str(int(sender_id_input.getter_x()))
            sender_account = self.find_account(sender_id)
            if not sender_account:
                print("L·ªói: T√†i kho·∫£n ng∆∞·ªùi g·ª≠i kh√¥ng t·ªìn t·∫°i.")
                return

            # Get receiver account
            receiver_id_input = HandleInputForNumber()
            receiver_id_input.handle_input(1, ["Nh·∫≠p s·ªë t√†i kho·∫£n ng∆∞·ªùi nh·∫≠n:"])
            receiver_id = str(int(receiver_id_input.getter_x()))
            receiver_account = self.find_account(receiver_id)
            if not receiver_account:
                print("L·ªói: T√†i kho·∫£n ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i.")
                return
                
            if sender_id == receiver_id:
                print("L·ªói: Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh.")
                return

            # Get amount
            amount_input = HandleInputForNumber()
            amount_input.handle_input(1, ["Nh·∫≠p s·ªë ti·ªÅn c·∫ßn chuy·ªÉn:"])
            amount = amount_input.getter_x()

            if sender_account.withdrawal_money(amount):
                receiver_account.deposit_money(amount)
                self._csv_account_writer()
                print("Chuy·ªÉn ti·ªÅn th√†nh c√¥ng.")
                print(f"S·ªë d∆∞ t√†i kho·∫£n ng∆∞·ªùi g·ª≠i: {sender_account.account_balance:,.0f} VNƒê")
                print(f"S·ªë d∆∞ t√†i kho·∫£n ng∆∞·ªùi nh·∫≠n: {receiver_account.account_balance:,.0f} VNƒê")

        except (ValueError, Exception) as e:
            print(f"L·ªói: {e}. Vui l√≤ng th·ª≠ l·∫°i.")


    def check_account_balance(self):
        """Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n"""
        self.account_statement() # Same functionality

    def backup_data(self):
backup_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'backup')
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)

            timestamp = datetime.now().strftime("dd/mm/yyyy")
            backup_file_name = f"taikhoan_{timestamp}.csv"
            backup_file_path = os.path.join(backup_dir, backup_file_name)

            with open(backup_file_path, mode='w', newline='', encoding='utf-8') as file:
                writer = csv.DictWriter(file, fieldnames=['acc_id', 'user_name', 'acc_type', 'account_balance'])
                writer.writeheader()
                for account in self.account_list:
                    writer.writerow(account.to_dict())
            
            self._csv_account_writer()
            print(f"Sao l∆∞u d·ªØ li·ªáu th√†nh c√¥ng v√†o: {backup_file_path}")
        except Exception as e:
            print(f"L·ªói khi sao l∆∞u: {e}")

    def restore_data(self):
        """Ph·ª•c h·ªìi d·ªØ li·ªáu t·ª´ m·ªôt file backup."""
        try:
            backup_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'backup')
            if not os.path.exists(backup_dir) or not os.path.isdir(backup_dir):
                print("L·ªói: Th∆∞ m·ª•c backup kh√¥ng t·ªìn t·∫°i.")
                return

            backup_files = [f for f in os.listdir(backup_dir) if f.endswith('.csv')]

            if not backup_files:
                print("Kh√¥ng t√¨m th·∫•y file backup n√†o.")
                return

            print("Ch·ªçn m·ªôt file ƒë·ªÉ ph·ª•c h·ªìi:")
            for i, file_name in enumerate(backup_files):
                print(f"  {i + 1}: {file_name}")

            choice_input = HandleInputForNumber()
            choice_input.handle_input(1, ["Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (nh·∫≠p 0 ƒë·ªÉ tho√°t): "])
            choice = int(choice_input.getter_x())

            if choice == 0:
                print("H·ªßy ph·ª•c h·ªìi.")
                return

            if 1 <= choice <= len(backup_files):
                selected_file = os.path.join(backup_dir, backup_files[choice - 1])
                
                new_accounts = []
                with open(selected_file, 'r', encoding='utf-8') as file:
                    reader = csv.DictReader(file)
                    for row in reader:
                        try:
                            account = Account(
                                acc_id=row['acc_id'],
                                user_name=row['user_name'],
                                acc_type=row['acc_type'],
                                account_balance=float(row['account_balance'])
                            )
                            new_accounts.append(account)
                        except (ValueError, KeyError) as e:
                            print(f"C·∫£nh b√°o: B·ªè qua d√≤ng l·ªói trong file backup: {row} -> {e}")
                
                self.account_list = new_accounts
                self._csv_account_writer()
                print(f"ƒê√£ ph·ª•c h·ªìi th√†nh c√¥ng t·ª´ file '{backup_files[choice - 1]}'.")
            else:
                print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

        except (ValueError, Exception) as e:
            print(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ph·ª•c h·ªìi: {e}")